Use Noun to represent the resources not verbs like /customer
 * ResponseEntity class fine tune the Http responses (Response header + response body)
 *
 * using ResponseEntity class we can set the body, status and header of a Http response .
 * Status can be : ok()         ---> 200 code    (Static methods)
 *                 ok(T Body)   ---> 201
 *                 badRequest() ---> 400
 *                 notFound()   ---> 404
 *                 status(int status) ---> Sets the given status code value
 *                 status(HTTPStatus status) -----> Sets the status code using HttpStaus enum
 *
 *   Response Entity (Constructors)
 *  1. ResponseEntity(Http status) creates a response entity object with the given status code
 *   and no body
 *  2. ResponseEntity(MultiValueMap headers, HttpStatus status)  creates a ResponseEntity object
 *   with headers and status code  but NO BODY
 *  3. ResponseEntity(T body, HttpStatus status)  ResponseEntity object with status code and body
 *  4. ResponseEntity(T body , MultiValueMap headers, HttpStatus status)  ResponseEntity object with status
 *  code , body and headers
 *
 *   Annotations used
 *   @ResquestBody helps in de-serializing the incoming customer data into CustomerDTO
 *   @Validated annotations trigger the data validation on request parameters/URI parameters
 *
 *   @Inject(can be used in place of @Autowired) If you are developing a Java EE or Jakarta EE application, or if you want to
 *    follow the JSR-330 standard for dependency injection, then @Inject is the more appropriate choice.
 *
 *   getStackTrace() provides detailed information about the call stack, which can be useful for debugging and analyzing
 *   the flow of program execution when an exception occurs. On the other hand, getMessage() provides a human-readable
 *   description of the exception, conveying information about what went wrong in a more user-friendly way. Depending on
 *   the context, you might use one or both of these methods when dealing with exceptions.
 *
 *   Versioning is implemented in the handler method below using three ways
 *
 *   Model Mapper is a java library which can map one object to another object (entity to DTO and DTO to entity)
 *   Here CustomerEntity to CustomerDTO .
  	 * https://www.baeldung.com/java-modelmapper  (For unit testing )
 *  DDL to create the table and DML to populate the data
 *  The interface extends JPA Repository and pass Entity class and type of primary key

 /********************************************************************************************************************************************
  * Java EE (up to version 8): If you are working with a Java EE version up to 8 or any framework that uses the Java EE validation API,
  *  you should use javax.validation.constraints.
  *  Jakarta EE (version 9 onwards): If you are using Jakarta EE version 9 or later, you should use jakarta.validation.constraints.
  *  The org.hibernate.validator.constraints package contains additional constraints provided by the Hibernate Validator framework, which is
  *  an implementation of the Java Bean Validation API. These constraints are Hibernate-specific and may not be part of the standard Bean
  *  Validation API.
  *  for example :
  *  @CreditCardNumber: Validates that a given string is a valid credit card number.
 	@Currency: Validates that a given string represents a valid currency.
 	@Email: Validates that a given string is a valid email address.
 	@Length: Validates that the length of the annotated element is between min and max (inclusive).
 	@Range: Checks whether the annotated value lies between (inclusive) the specified minimum and maximum.

 	- Jakarta Bean Validation is a model for validating data in Java objects.
 	- Hibernate Validator is the JBoss EAP implementation of Jakarta Bean Validation.
 	- JBoss EAP is 100% compliant with Jakarta Bean Validation 2.0 specification. Hibernate Validator also provides additional
 	  features to the specification.
  *******************************************************************************************************************************************/

/*************************************************************************************************************
         * The @Valid annotation will automatically trigger validation for customerDTO
         * No need to check for null here, as @Valid will handle validation .you don't need to manually throw
         * MethodArgumentNotValidException in your controller method
         *************************************************************************************************************/


 /*******************************************************************************************************************************************
  * Data transfer object that carries data from one layer to another for e.g the form data reaches the controller layer using DTO objects
  * Hibernate validator is one of the implementations of the bean validation API.
  * we use annotations to validate input/incoming data
  * Bean validation API provides a number of annotations @Email, @Max ,@Min, @NotEmpty
  ******************************************************************************************************************************************/
